{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PeticionService {\n  constructor(http) {\n    this.http = http;\n    this.urlHost = \"http://localhost:3000\";\n  }\n  Post(endpoint, data) {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('POST URL:', url);\n    return new Promise((resolve, reject) => {\n      this.http.post(url, data).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        console.error('POST Error:', error);\n        reject(error);\n      });\n    });\n  }\n  Put(endpoint, data) {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('PUT URL:', url);\n    return new Promise((resolve, reject) => {\n      this.http.put(url, data).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        console.error('PUT Error:', error);\n        reject(error);\n      });\n    });\n  }\n  Delete(endpoint, data) {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('DELETE URL:', url);\n    return new Promise((resolve, reject) => {\n      this.http.delete(url, {\n        body: data\n      }).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        console.error('DELETE Error:', error);\n        reject(error);\n      });\n    });\n  }\n  Get(endpoint) {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('GET URL:', url);\n    return new Promise((resolve, reject) => {\n      this.http.get(url).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        console.error('GET Error:', error);\n        reject(error);\n      });\n    });\n  }\n  static #_ = this.ɵfac = function PeticionService_Factory(t) {\n    return new (t || PeticionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PeticionService,\n    factory: PeticionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PeticionService","constructor","http","urlHost","Post","endpoint","data","url","console","log","Promise","resolve","reject","post","toPromise","then","res","catch","error","Put","put","Delete","delete","body","Get","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\daniz\\Desktop\\Angular\\my-app\\src\\app\\servicios\\peticion.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class PeticionService {\n\n//   constructor(private http: HttpClient) { }\n\n//   urlHost:string = 'http://localhost:3000'\n\n\n//   Post(url:string, data:{}){\n    \n//     let promise = new Promise ((resolve, reject) => {\n\n//       this.http.post(url,data).toPromise().then(\n//         (res:any) => {\n//           resolve(res)\n//         }\n//         ).catch((error) => {\n//           reject(error)\n//         })\n//       })\n//     return promise\n//   }\n//   Put(url:string, data:{}){\n    \n//     let promise = new Promise ((resolve, reject) => {\n\n//       this.http.put(url,data).toPromise().then(\n//         (res:any) => {\n//           resolve(res)\n//         }\n//         ).catch((error) => {\n//           reject(error)\n//         })\n      \n\n//     })\n//     return promise\n//   }\n//   delete(url:string, data:{}){\n    \n//     let promise = new Promise ((resolve, reject) => {\n\n//       this.http.delete(url,data).toPromise().then(\n//         (res:any) => {\n//           resolve(res)\n//         }\n//         ).catch((error) => {\n//           reject(error)\n//         })\n      \n\n//     })\n//     return promise\n//   }\n//   get(url:string){\n    \n//     let promise = new Promise ((resolve, reject) => {\n\n//       this.http.get(url).toPromise().then(\n//         (res:any) => {\n//           resolve(res)\n//         }\n//         ).catch((error) => {\n//           reject(error)\n//         })\n      \n\n//     })\n//     return promise\n//   }\n  \n// }\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeticionService {\n\n  constructor(private http: HttpClient) { }\n\n  urlHost: string = \"http://localhost:3000\"\n\n  Post(endpoint: string, data: {}): Promise<any> {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('POST URL:', url);\n    \n    return new Promise((resolve, reject) => {\n      this.http.post(url, data).toPromise()\n        .then((res: any) => {\n          resolve(res);\n        })\n        .catch((error) => {\n          console.error('POST Error:', error);\n          reject(error);\n        });\n    });\n  }\n\n  Put(endpoint: string, data: {}): Promise<any> {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('PUT URL:', url);\n    \n    return new Promise((resolve, reject) => {\n      this.http.put(url, data).toPromise()\n        .then((res: any) => {\n          resolve(res);\n        })\n        .catch((error) => {\n          console.error('PUT Error:', error);\n          reject(error);\n        });\n    });\n  }\n\n  Delete(endpoint: string, data: {}): Promise<any> {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('DELETE URL:', url);\n    \n    return new Promise((resolve, reject) => {\n      this.http.delete(url, { body: data }).toPromise()\n        .then((res: any) => {\n          resolve(res);\n        })\n        .catch((error) => {\n          console.error('DELETE Error:', error);\n          reject(error);\n        });\n    });\n  }\n\n  Get(endpoint: string): Promise<any> {\n    const url = `${this.urlHost}${endpoint}`;\n    console.log('GET URL:', url);\n    \n    return new Promise((resolve, reject) => {\n      this.http.get(url).toPromise()\n        .then((res: any) => {\n          resolve(res);\n        })\n        .catch((error) => {\n          console.error('GET Error:', error);\n          reject(error);\n        });\n    });\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}