{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PeticionService {\n  constructor(http) {\n    this.http = http;\n    this.urlHost = \"http://localhost:3000\";\n  }\n  Post(url, data) {\n    let promise = new Promise((resolve, reject) => {\n      this.http.post(url, data).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Put(url, data) {\n    let promise = new Promise((resolve, reject) => {\n      this.http.put(url, data).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Delete(url) {\n    let promise = new Promise((resolve, reject) => {\n      this.http.delete(url).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Get(url) {\n    let promise = new Promise((resolve, reject) => {\n      this.http.get(url).toPromise().then(res => {\n        resolve(res);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n  static #_ = this.ɵfac = function PeticionService_Factory(t) {\n    return new (t || PeticionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PeticionService,\n    factory: PeticionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PeticionService","constructor","http","urlHost","Post","url","data","promise","Promise","resolve","reject","post","toPromise","then","res","catch","error","Put","put","Delete","delete","Get","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\daniz\\Desktop\\Angular\\my-app\\src\\app\\servicios\\peticion.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeticionService {\n\n  constructor(private http: HttpClient) { }\n\n  urlHost: string = \"http://localhost:3000\"\n\n  Post(url: string, data: {}): Promise<any> {\n    let promise = new Promise((resolve, reject) => {\n      this.http.post(url, data).toPromise().then(\n        (res: any) => {\n          resolve(res);\n        }\n      ).catch((error) => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Put(url: string, data: {}): Promise<any> {\n    let promise = new Promise((resolve, reject) => {\n      this.http.put(url, data).toPromise().then(\n        (res: any) => {\n          resolve(res);\n        }\n      ).catch((error) => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Delete(url: string): Promise<any> { // Fixed to match the HTTP method signature\n    let promise = new Promise((resolve, reject) => {\n      this.http.delete(url).toPromise().then(\n        (res: any) => {\n          resolve(res);\n        }\n      ).catch((error) => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n\n  Get(url: string): Promise<any> {\n    let promise = new Promise((resolve, reject) => {\n      this.http.get(url).toPromise().then(\n        (res: any) => {\n          resolve(res);\n        }\n      ).catch((error) => {\n        reject(error);\n      });\n    });\n    return promise; // Return the promise object instead of Promise constructor\n  }\n}"],"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,OAAO,GAAW,uBAAuB;EAFD;EAIxCC,IAAIA,CAACC,GAAW,EAAEC,IAAQ;IACxB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5C,IAAI,CAACR,IAAI,CAACS,IAAI,CAACN,GAAG,EAAEC,IAAI,CAAC,CAACM,SAAS,EAAE,CAACC,IAAI,CACvCC,GAAQ,IAAI;QACXL,OAAO,CAACK,GAAG,CAAC;MACd,CAAC,CACF,CAACC,KAAK,CAAEC,KAAK,IAAI;QAChBN,MAAM,CAACM,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOT,OAAO,CAAC,CAAC;EAClB;;EAEAU,GAAGA,CAACZ,GAAW,EAAEC,IAAQ;IACvB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5C,IAAI,CAACR,IAAI,CAACgB,GAAG,CAACb,GAAG,EAAEC,IAAI,CAAC,CAACM,SAAS,EAAE,CAACC,IAAI,CACtCC,GAAQ,IAAI;QACXL,OAAO,CAACK,GAAG,CAAC;MACd,CAAC,CACF,CAACC,KAAK,CAAEC,KAAK,IAAI;QAChBN,MAAM,CAACM,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOT,OAAO,CAAC,CAAC;EAClB;;EAEAY,MAAMA,CAACd,GAAW;IAChB,IAAIE,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5C,IAAI,CAACR,IAAI,CAACkB,MAAM,CAACf,GAAG,CAAC,CAACO,SAAS,EAAE,CAACC,IAAI,CACnCC,GAAQ,IAAI;QACXL,OAAO,CAACK,GAAG,CAAC;MACd,CAAC,CACF,CAACC,KAAK,CAAEC,KAAK,IAAI;QAChBN,MAAM,CAACM,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOT,OAAO,CAAC,CAAC;EAClB;;EAEAc,GAAGA,CAAChB,GAAW;IACb,IAAIE,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5C,IAAI,CAACR,IAAI,CAACoB,GAAG,CAACjB,GAAG,CAAC,CAACO,SAAS,EAAE,CAACC,IAAI,CAChCC,GAAQ,IAAI;QACXL,OAAO,CAACK,GAAG,CAAC;MACd,CAAC,CACF,CAACC,KAAK,CAAEC,KAAK,IAAI;QAChBN,MAAM,CAACM,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOT,OAAO,CAAC,CAAC;EAClB;EAAC,QAAAgB,CAAA,G;qBAxDUvB,eAAe,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf5B,eAAe;IAAA6B,OAAA,EAAf7B,eAAe,CAAA8B,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}